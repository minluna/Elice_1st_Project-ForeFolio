{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/pages/network/Network.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row } from 'react-bootstrap';\nimport * as Api from '../../api';\nimport UserCard from '../../components/user/UserCard';\nimport { UserStateContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Network() {\n  _s();\n\n  const navigate = useNavigate();\n  const userState = useContext(UserStateContext); // useState 훅을 통해 users 상태를 생성함.\n\n  const [users, setUsers] = useState([]); // useState 훅을 통해 userImageUrl 상태를 생성함.\n  //페이지 경로에 따라 배경색이 달라짐\n\n  useEffect(() => {\n    const {\n      pathname\n    } = window.location;\n\n    if (pathname.startsWith('/user') || pathname === '/network' || pathname === '/wanted' || pathname === '/') {\n      document.body.classList.add('portfolio');\n    } else {\n      document.body.classList.remove('portfolio');\n    } // cleanup 함수\n\n\n    return () => {\n      document.body.classList.remove('portfolio');\n    };\n  }, []);\n  useEffect(() => {\n    // 만약 전역 상태의 user가 null이라면, 로그인 페이지로 이동함.\n    if (!userState.user) {\n      navigate('/login');\n      return;\n    }\n\n    try {\n      // \"userlist\" 엔드포인트로 GET 요청을 하고, users를 response의 data로 세팅함.\n      Api.get('user/userlist').then(res => setUsers(res.data));\n    } catch (err) {\n      if (err.response.status === 400) {\n        alert('err.response.data.error');\n      }\n\n      console.log('유저 목록을 불러오는데 실패하였습니다.', err);\n    }\n  }, [userState, navigate]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"pt-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      xs: \"auto\",\n      className: \"justify-content-center\",\n      children: users.map(user => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: user.userImage ? /*#__PURE__*/_jsxDEV(UserCard, {\n          user: user,\n          isNetwork: true,\n          userImageUrl: user.userImage.imageUri\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(UserCard, {\n          user: user,\n          isNetwork: true,\n          userImageUrl: 'http://placekitten.com/200/200'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)\n      }, user._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Network, \"bdALHaz5nbTMb0htyO8Rgjchu04=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Network;\nexport default Network;\n\nvar _c;\n\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/pages/network/Network.js"],"names":["React","useEffect","useContext","useState","useNavigate","Container","Row","Api","UserCard","UserStateContext","Network","navigate","userState","users","setUsers","pathname","window","location","startsWith","document","body","classList","add","remove","user","get","then","res","data","err","response","status","alert","console","log","map","userImage","imageUri","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row } from 'react-bootstrap';\n\nimport * as Api from '../../api';\nimport UserCard from '../../components/user/UserCard';\nimport { UserStateContext } from '../../App';\n\nfunction Network() {\n    const navigate = useNavigate();\n    const userState = useContext(UserStateContext);\n    // useState 훅을 통해 users 상태를 생성함.\n    const [users, setUsers] = useState([]);\n    // useState 훅을 통해 userImageUrl 상태를 생성함.\n\n    //페이지 경로에 따라 배경색이 달라짐\n    useEffect(() => {\n        const { pathname } = window.location;\n        if (pathname.startsWith('/user') || pathname === '/network' || pathname === '/wanted' || pathname === '/') {\n            document.body.classList.add('portfolio');\n        } else {\n            document.body.classList.remove('portfolio');\n        }\n        // cleanup 함수\n        return () => {\n            document.body.classList.remove('portfolio');\n        };\n    }, []);\n\n    useEffect(() => {\n        // 만약 전역 상태의 user가 null이라면, 로그인 페이지로 이동함.\n        if (!userState.user) {\n            navigate('/login');\n            return;\n        }\n        try {\n            // \"userlist\" 엔드포인트로 GET 요청을 하고, users를 response의 data로 세팅함.\n            Api.get('user/userlist').then(res => setUsers(res.data));\n        } catch (err) {\n            if (err.response.status === 400) {\n                alert('err.response.data.error');\n            }\n            console.log('유저 목록을 불러오는데 실패하였습니다.', err);\n        }\n    }, [userState, navigate]);\n\n    return (\n        <Container fluid className=\"pt-4\">\n            <Row xs=\"auto\" className=\"justify-content-center\">\n                {users.map(user => (\n                    <React.Fragment key={user._id}>\n                        {user.userImage ? (\n                            <UserCard user={user} isNetwork userImageUrl={user.userImage.imageUri} />\n                        ) : (\n                            <UserCard user={user} isNetwork userImageUrl={'http://placekitten.com/200/200'} />\n                        )}\n                    </React.Fragment>\n                ))}\n            </Row>\n        </Container>\n    );\n}\n\nexport default Network;\n"]},"metadata":{},"sourceType":"module"}