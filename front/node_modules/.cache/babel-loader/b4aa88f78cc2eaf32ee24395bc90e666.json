{"ast":null,"code":"import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n    defaultZone = \"system\",\n    defaultLocale = null,\n    defaultNumberingSystem = null,\n    defaultOutputCalendar = null,\n    twoDigitCutoffYear = 60,\n    throwOnInvalid;\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\n\n\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n\n\n  static set now(n) {\n    now = n;\n  }\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n\n\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n\n\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n  /**\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   */\n\n\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n  /**\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\n   */\n\n\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n\n\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n\n\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n\n\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n\n}","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/node_modules/luxon/src/settings.js"],"names":["SystemZone","IANAZone","Locale","normalizeZone","now","Date","defaultZone","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","twoDigitCutoffYear","throwOnInvalid","Settings","n","zone","instance","locale","numberingSystem","outputCalendar","cutoffYear","t","resetCaches","resetCache"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,IAAIC,GAAG,GAAG,MAAMC,IAAI,CAACD,GAAL,EAAhB;AAAA,IACEE,WAAW,GAAG,QADhB;AAAA,IAEEC,aAAa,GAAG,IAFlB;AAAA,IAGEC,sBAAsB,GAAG,IAH3B;AAAA,IAIEC,qBAAqB,GAAG,IAJ1B;AAAA,IAKEC,kBAAkB,GAAG,EALvB;AAAA,IAMEC,cANF;AAQA;AACA;AACA;;;AACA,eAAe,MAAMC,QAAN,CAAe;AAC5B;AACF;AACA;AACA;AACgB,aAAHR,GAAG,GAAG;AACf,WAAOA,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACgB,aAAHA,GAAG,CAACS,CAAD,EAAI;AAChBT,IAAAA,GAAG,GAAGS,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACwB,aAAXP,WAAW,CAACQ,IAAD,EAAO;AAC3BR,IAAAA,WAAW,GAAGQ,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;;;AACwB,aAAXR,WAAW,GAAG;AACvB,WAAOH,aAAa,CAACG,WAAD,EAAcN,UAAU,CAACe,QAAzB,CAApB;AACD;AAED;AACF;AACA;AACA;;;AAC0B,aAAbR,aAAa,GAAG;AACzB,WAAOA,aAAP;AACD;AAED;AACF;AACA;AACA;;;AAC0B,aAAbA,aAAa,CAACS,MAAD,EAAS;AAC/BT,IAAAA,aAAa,GAAGS,MAAhB;AACD;AAED;AACF;AACA;AACA;;;AACmC,aAAtBR,sBAAsB,GAAG;AAClC,WAAOA,sBAAP;AACD;AAED;AACF;AACA;AACA;;;AACmC,aAAtBA,sBAAsB,CAACS,eAAD,EAAkB;AACjDT,IAAAA,sBAAsB,GAAGS,eAAzB;AACD;AAED;AACF;AACA;AACA;;;AACkC,aAArBR,qBAAqB,GAAG;AACjC,WAAOA,qBAAP;AACD;AAED;AACF;AACA;AACA;;;AACkC,aAArBA,qBAAqB,CAACS,cAAD,EAAiB;AAC/CT,IAAAA,qBAAqB,GAAGS,cAAxB;AACD;AAED;AACF;AACA;AACA;;;AAC+B,aAAlBR,kBAAkB,GAAG;AAC9B,WAAOA,kBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,aAAlBA,kBAAkB,CAACS,UAAD,EAAa;AACxCT,IAAAA,kBAAkB,GAAGS,UAAU,GAAG,GAAlC;AACD;AAED;AACF;AACA;AACA;;;AAC2B,aAAdR,cAAc,GAAG;AAC1B,WAAOA,cAAP;AACD;AAED;AACF;AACA;AACA;;;AAC2B,aAAdA,cAAc,CAACS,CAAD,EAAI;AAC3BT,IAAAA,cAAc,GAAGS,CAAjB;AACD;AAED;AACF;AACA;AACA;;;AACoB,SAAXC,WAAW,GAAG;AACnBnB,IAAAA,MAAM,CAACoB,UAAP;AACArB,IAAAA,QAAQ,CAACqB,UAAT;AACD;;AAjI2B","sourcesContent":["import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}