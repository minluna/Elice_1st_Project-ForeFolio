{"ast":null,"code":"import axios from 'axios';\nconst backendPortNumber = '5001';\nconst serverUrl = 'http://' + window.location.hostname + ':' + backendPortNumber + '/';\n\nasync function get(endpoint) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  console.log(`%cGET 요청 ${serverUrl + endpoint + '/' + params}`, 'color: #a25cd1;');\n  return axios.get(serverUrl + endpoint + '/' + params, {\n    // JWT 토큰을 헤더에 담아 백엔드 서버에 보냄.\n    headers: {\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n}\n\nasync function postFile(endpoint, formData) {\n  console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n  console.log(`%cPOST 요청 데이터: ${formData}`, 'color: #296aba;');\n  return await axios.post(serverUrl + endpoint, formData, {\n    headers: {\n      'content-type': 'multipart/form-data',\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n}\n\nasync function post(endpoint, data) {\n  // JSON.stringify 함수: Javascript 객체를 JSON 형태로 변환함.\n  // 예시: {name: \"Kim\"} => {\"name\": \"Kim\"}\n  const bodyData = JSON.stringify(data);\n  console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n  console.log(`%cPOST 요청 데이터: ${bodyData}`, 'color: #296aba;');\n  return axios.post(serverUrl + endpoint, bodyData, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n}\n\nasync function putFile(endpoint, formData) {\n  console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n  console.log(`%cPOST 요청 데이터: ${formData}`, 'color: #296aba;');\n  return await axios.put(serverUrl + endpoint, formData, {\n    headers: {\n      'content-type': 'multipart/form-data',\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n}\n\nasync function put(endpoint, data) {\n  // JSON.stringify 함수: Javascript 객체를 JSON 형태로 변환함.\n  // 예시: {name: \"Kim\"} => {\"name\": \"Kim\"}\n  const bodyData = JSON.stringify(data);\n  console.log(`%cPUT 요청: ${serverUrl + endpoint}`, 'color: #059c4b;');\n  console.log(`%cPUT 요청 데이터: ${bodyData}`, 'color: #059c4b;');\n  return axios.put(serverUrl + endpoint, bodyData, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n} // 아래 함수명에 관해, delete 단어는 자바스크립트의 reserved 단어이기에,\n// 여기서는 우선 delete 대신 del로 쓰고 아래 export 시에 delete로 alias 함.\n\n\nasync function del(endpoint) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  console.log(`DELETE 요청 ${serverUrl + endpoint + '/' + params}`);\n  return axios.delete(serverUrl + endpoint + '/' + params, {\n    headers: {\n      Authorization: `Bearer ${sessionStorage.getItem('userToken')}`\n    }\n  });\n} // 아래처럼 export한 후, import * as A 방식으로 가져오면,\n// A.get, A.post 로 쓸 수 있음.\n\n\nexport { get, postFile, post, putFile, put, del as delete };","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/api.js"],"names":["axios","backendPortNumber","serverUrl","window","location","hostname","get","endpoint","params","console","log","headers","Authorization","sessionStorage","getItem","postFile","formData","post","data","bodyData","JSON","stringify","putFile","put","del","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst backendPortNumber = '5001';\nconst serverUrl = 'http://' + window.location.hostname + ':' + backendPortNumber + '/';\n\nasync function get(endpoint, params = '') {\n    console.log(`%cGET 요청 ${serverUrl + endpoint + '/' + params}`, 'color: #a25cd1;');\n\n    return axios.get(serverUrl + endpoint + '/' + params, {\n        // JWT 토큰을 헤더에 담아 백엔드 서버에 보냄.\n        headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\nasync function postFile(endpoint, formData) {\n    console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n    console.log(`%cPOST 요청 데이터: ${formData}`, 'color: #296aba;');\n    return await axios.post(serverUrl + endpoint, formData, {\n        headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\nasync function post(endpoint, data) {\n    // JSON.stringify 함수: Javascript 객체를 JSON 형태로 변환함.\n    // 예시: {name: \"Kim\"} => {\"name\": \"Kim\"}\n    const bodyData = JSON.stringify(data);\n    console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n    console.log(`%cPOST 요청 데이터: ${bodyData}`, 'color: #296aba;');\n    return axios.post(serverUrl + endpoint, bodyData, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\nasync function putFile(endpoint, formData) {\n    console.log(`%cPOST 요청: ${serverUrl + endpoint}`, 'color: #296aba;');\n    console.log(`%cPOST 요청 데이터: ${formData}`, 'color: #296aba;');\n    return await axios.put(serverUrl + endpoint, formData, {\n        headers: {\n            'content-type': 'multipart/form-data',\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\nasync function put(endpoint, data) {\n    // JSON.stringify 함수: Javascript 객체를 JSON 형태로 변환함.\n    // 예시: {name: \"Kim\"} => {\"name\": \"Kim\"}\n    const bodyData = JSON.stringify(data);\n    console.log(`%cPUT 요청: ${serverUrl + endpoint}`, 'color: #059c4b;');\n    console.log(`%cPUT 요청 데이터: ${bodyData}`, 'color: #059c4b;');\n\n    return axios.put(serverUrl + endpoint, bodyData, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\n// 아래 함수명에 관해, delete 단어는 자바스크립트의 reserved 단어이기에,\n// 여기서는 우선 delete 대신 del로 쓰고 아래 export 시에 delete로 alias 함.\nasync function del(endpoint, params = '') {\n    console.log(`DELETE 요청 ${serverUrl + endpoint + '/' + params}`);\n    return axios.delete(serverUrl + endpoint + '/' + params, {\n        headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('userToken')}`,\n        },\n    });\n}\n\n// 아래처럼 export한 후, import * as A 방식으로 가져오면,\n// A.get, A.post 로 쓸 수 있음.\nexport { get, postFile, post, putFile, put, del as delete };\n"]},"metadata":{},"sourceType":"module"}