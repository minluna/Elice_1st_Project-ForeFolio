{"ast":null,"code":"import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\n\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n\n    return singleton;\n  }\n  /** @override **/\n\n\n  get type() {\n    return \"system\";\n  }\n  /** @override **/\n\n\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n  /** @override **/\n\n\n  get isUniversal() {\n    return false;\n  }\n  /** @override **/\n\n\n  offsetName(ts, _ref) {\n    let {\n      format,\n      locale\n    } = _ref;\n    return parseZoneInfo(ts, format, locale);\n  }\n  /** @override **/\n\n\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n  /** @override **/\n\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n  /** @override **/\n\n\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n  /** @override **/\n\n\n  get isValid() {\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/node_modules/luxon/src/zones/systemZone.js"],"names":["formatOffset","parseZoneInfo","Zone","singleton","SystemZone","instance","type","name","Intl","DateTimeFormat","resolvedOptions","timeZone","isUniversal","offsetName","ts","format","locale","offset","Date","getTimezoneOffset","equals","otherZone","isValid"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,iBAA5C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,SAAyBF,IAAzB,CAA8B;AAC3C;AACF;AACA;AACA;AACqB,aAARG,QAAQ,GAAG;AACpB,QAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtBA,MAAAA,SAAS,GAAG,IAAIC,UAAJ,EAAZ;AACD;;AACD,WAAOD,SAAP;AACD;AAED;;;AACQ,MAAJG,IAAI,GAAG;AACT,WAAO,QAAP;AACD;AAED;;;AACQ,MAAJC,IAAI,GAAG;AACT,WAAO,IAAIC,IAAI,CAACC,cAAT,GAA0BC,eAA1B,GAA4CC,QAAnD;AACD;AAED;;;AACe,MAAXC,WAAW,GAAG;AAChB,WAAO,KAAP;AACD;AAED;;;AACAC,EAAAA,UAAU,CAACC,EAAD,QAAyB;AAAA,QAApB;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAoB;AACjC,WAAOf,aAAa,CAACa,EAAD,EAAKC,MAAL,EAAaC,MAAb,CAApB;AACD;AAED;;;AACAhB,EAAAA,YAAY,CAACc,EAAD,EAAKC,MAAL,EAAa;AACvB,WAAOf,YAAY,CAAC,KAAKiB,MAAL,CAAYH,EAAZ,CAAD,EAAkBC,MAAlB,CAAnB;AACD;AAED;;;AACAE,EAAAA,MAAM,CAACH,EAAD,EAAK;AACT,WAAO,CAAC,IAAII,IAAJ,CAASJ,EAAT,EAAaK,iBAAb,EAAR;AACD;AAED;;;AACAC,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB,WAAOA,SAAS,CAACf,IAAV,KAAmB,QAA1B;AACD;AAED;;;AACW,MAAPgB,OAAO,GAAG;AACZ,WAAO,IAAP;AACD;;AAlD0C","sourcesContent":["import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}