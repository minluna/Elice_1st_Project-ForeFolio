{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/pages/login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\nimport * as Api from \"../../api\";\nimport { DispatchContext } from \"../../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useContext(DispatchContext); //useState로 email 상태를 생성함.\n\n  const [email, setEmail] = useState(\"\"); //useState로 password 상태를 생성함.\n\n  const [password, setPassword] = useState(\"\"); //이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\n\n  const validateEmail = email => {\n    return email.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  }; //위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\n\n\n  const isEmailValid = validateEmail(email); // 비밀번호가 4글자 이상인지 여부를 확인함.\n\n  const isPasswordValid = password.length >= 4; //\n  // 이메일과 비밀번호 조건이 동시에 만족되는지 확인함.\n\n  const isFormValid = isEmailValid && isPasswordValid;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      // \"user/login\" 엔드포인트로 post요청함.\n      const res = await Api.post(\"user/login\", {\n        email,\n        password\n      }); // 유저 정보는 response의 data임.\n\n      const user = res.data; // JWT 토큰은 유저 정보의 token임.\n\n      const jwtToken = user.token; // sessionStorage에 \"userToken\"이라는 키로 JWT 토큰을 저장함.\n\n      sessionStorage.setItem(\"userToken\", jwtToken); // dispatch 함수를 이용해 로그인 성공 상태로 만듦.\n\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: user\n      }); // 기본 페이지로 이동함.\n\n      navigate(\"/\", {\n        replace: true\n      });\n    } catch (err) {\n      console.log(\"로그인에 실패하였습니다.\\n\", err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"loginEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              autoComplete: \"on\",\n              value: email,\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this), !isEmailValid && /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-success\",\n              children: \"\\uC774\\uBA54\\uC77C \\uD615\\uC2DD\\uC774 \\uC62C\\uBC14\\uB974\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"loginPassword\",\n            className: \"mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              autoComplete: \"on\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), !isPasswordValid && /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-success\",\n              children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 4\\uAE00\\uC790 \\uC774\\uC0C1\\uC785\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            className: \"mt-3 text-center\",\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: {\n                span: 20\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                disabled: !isFormValid,\n                children: \"\\uB85C\\uADF8\\uC778\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            className: \"mt-3 text-center\",\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: {\n                span: 20\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"light\",\n                onClick: () => navigate(\"/register\"),\n                children: \"\\uD68C\\uC6D0\\uAC00\\uC785\\uD558\\uAE30\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"yNum6TSHGltFWNrMMdHLrDvrmhw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/pages/login/LoginForm.js"],"names":["React","useState","useContext","useNavigate","Container","Col","Row","Form","Button","Api","DispatchContext","LoginForm","navigate","dispatch","email","setEmail","password","setPassword","validateEmail","toLowerCase","match","isEmailValid","isPasswordValid","length","isFormValid","handleSubmit","e","preventDefault","res","post","user","data","jwtToken","token","sessionStorage","setItem","type","payload","replace","err","console","log","target","value","span"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\n\nimport * as Api from \"../../api\";\nimport { DispatchContext } from \"../../App\";\n\nfunction LoginForm() {\n  const navigate = useNavigate();\n  const dispatch = useContext(DispatchContext);\n\n  //useState로 email 상태를 생성함.\n  const [email, setEmail] = useState(\"\");\n  //useState로 password 상태를 생성함.\n  const [password, setPassword] = useState(\"\");\n\n  //이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\n  const validateEmail = (email) => {\n    return email\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  };\n\n  //위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\n  const isEmailValid = validateEmail(email);\n  // 비밀번호가 4글자 이상인지 여부를 확인함.\n  const isPasswordValid = password.length >= 4;\n  //\n  // 이메일과 비밀번호 조건이 동시에 만족되는지 확인함.\n  const isFormValid = isEmailValid && isPasswordValid;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      // \"user/login\" 엔드포인트로 post요청함.\n      const res = await Api.post(\"user/login\", {\n        email,\n        password,\n      });\n      // 유저 정보는 response의 data임.\n      const user = res.data;\n      // JWT 토큰은 유저 정보의 token임.\n      const jwtToken = user.token;\n      // sessionStorage에 \"userToken\"이라는 키로 JWT 토큰을 저장함.\n      sessionStorage.setItem(\"userToken\", jwtToken);\n      // dispatch 함수를 이용해 로그인 성공 상태로 만듦.\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: user,\n      });\n\n      // 기본 페이지로 이동함.\n      navigate(\"/\", { replace: true });\n    } catch (err) {\n      console.log(\"로그인에 실패하였습니다.\\n\", err);\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg={8}>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginEmail\">\n              <Form.Label>이메일 주소</Form.Label>\n              <Form.Control\n                type=\"email\"\n                autoComplete=\"on\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              {!isEmailValid && (\n                <Form.Text className=\"text-success\">\n                  이메일 형식이 올바르지 않습니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group controlId=\"loginPassword\" className=\"mt-3\">\n              <Form.Label>비밀번호</Form.Label>\n              <Form.Control\n                type=\"password\"\n                autoComplete=\"on\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              {!isPasswordValid && (\n                <Form.Text className=\"text-success\">\n                  비밀번호는 4글자 이상입니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"primary\" type=\"submit\" disabled={!isFormValid}>\n                  로그인\n                </Button>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"light\" onClick={() => navigate(\"/register\")}>\n                  회원가입하기\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}