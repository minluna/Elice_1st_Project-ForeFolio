{"ast":null,"code":"import { ZoneIsAbstractError } from \"./errors.js\";\n/**\n * @interface\n */\n\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n\n\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n\n\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n\n\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n\n\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n\n\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n\n\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n\n\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n\n}","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/node_modules/luxon/src/zone.js"],"names":["ZoneIsAbstractError","Zone","type","name","ianaName","isUniversal","offsetName","ts","opts","formatOffset","format","offset","equals","otherZone","isValid"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,IAAN,CAAW;AACxB;AACF;AACA;AACA;AACA;AACU,MAAJC,IAAI,GAAG;AACT,UAAM,IAAIF,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,MAAJG,IAAI,GAAG;AACT,UAAM,IAAIH,mBAAJ,EAAN;AACD;;AAEW,MAARI,QAAQ,GAAG;AACb,WAAO,KAAKD,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACiB,MAAXE,WAAW,GAAG;AAChB,UAAM,IAAIL,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,UAAU,CAACC,EAAD,EAAKC,IAAL,EAAW;AACnB,UAAM,IAAIR,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,YAAY,CAACF,EAAD,EAAKG,MAAL,EAAa;AACvB,UAAM,IAAIV,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,MAAM,CAACJ,EAAD,EAAK;AACT,UAAM,IAAIP,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB,UAAM,IAAIb,mBAAJ,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACa,MAAPc,OAAO,GAAG;AACZ,UAAM,IAAId,mBAAJ,EAAN;AACD;;AApFuB","sourcesContent":["import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}