{"ast":null,"code":"import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\nconst INVALID = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\n  } else {\n    return null;\n  }\n}\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\n\n\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n\n    this.e = config.end;\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n\n\n  static invalid(reason) {\n    let explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid\n      });\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n\n\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n          builtEnd = friendlyDateTime(end);\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n\n\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n\n    if (s && e) {\n      let start, startIsValid;\n\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n\n\n  static isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n\n\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n\n\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n\n\n  get isValid() {\n    return this.invalidReason === null;\n  }\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n\n\n  length() {\n    let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n\n\n  count() {\n    let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n          end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n\n\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n\n\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n\n\n  set() {\n    let {\n      start,\n      end\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n\n\n  splitAt() {\n    if (!this.isValid) return [];\n\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\n          results = [];\n    let {\n      s\n    } = this,\n        i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n            next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n\n\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let {\n      s\n    } = this,\n        idx = 1,\n        next;\n    const results = [];\n\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits(x => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n\n\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n          e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n          e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n\n\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce((_ref, item) => {\n      let [sofar, current] = _ref;\n\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n\n    if (final) {\n      found.push(final);\n    }\n\n    return found;\n  }\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n\n\n  static xor(intervals) {\n    let start = null,\n        currentCount = 0;\n    const results = [],\n          ends = intervals.map(i => [{\n      time: i.s,\n      type: \"s\"\n    }, {\n      time: i.e,\n      type: \"e\"\n    }]),\n          flattened = Array.prototype.concat(...ends),\n          arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n\n\n  difference() {\n    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      intervals[_key2] = arguments[_key2];\n    }\n\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\n  }\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n\n\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n\n\n  toLocaleString() {\n    let formatOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Formats.DATE_SHORT;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n\n\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n\n\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n\n\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n\n\n  toFormat(dateFormat) {\n    let {\n      separator = \" – \"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n\n\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n\n    return this.e.diff(this.s, unit, opts);\n  }\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n\n\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n\n}","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/node_modules/luxon/src/interval.js"],"names":["DateTime","friendlyDateTime","Duration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","Formatter","Formats","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","toISO","constructor","config","s","e","isLuxonInterval","reason","explanation","throwOnInvalid","fromDateTimes","builtStart","builtEnd","validateError","after","duration","dur","fromDurationLike","dt","plus","before","minus","fromISO","text","opts","split","startIsValid","endIsValid","isInterval","o","invalidReason","invalidExplanation","length","unit","toDuration","get","NaN","count","startOf","Math","floor","diff","valueOf","hasSame","isEmpty","isAfter","dateTime","isBefore","contains","set","splitAt","dateTimes","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","as","idx","mapUnits","x","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","merge","intervals","found","final","a","b","reduce","item","sofar","current","concat","xor","currentCount","ends","time","type","flattened","Array","prototype","arr","difference","toString","toLocaleString","formatOpts","DATE_SHORT","create","loc","clone","formatInterval","toISODate","toISOTime","toFormat","dateFormat","separator","mapEndpoints","mapFn"],"mappings":"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","sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}