{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/components/user/User.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport UserEditFormPortfolo from './UserEditFormPortfolo';\nimport UserCardPortfolio from './UserCardPortfolio';\nimport * as Api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction User(_ref) {\n  _s();\n\n  let {\n    portfolioOwnerId,\n    isEditable\n  } = _ref;\n  // useState 훅을 통해 isEditing 상태를 생성함.\n  const [isEditing, setIsEditing] = useState(false); // useState 훅을 통해 user 상태를 생성함.\n\n  const [user, setUser] = useState(null); // useState 훅을 통해 userImageUrl 상태를 생성함.\n\n  const [userImageUrl, setUserImageUrl] = useState('');\n  const fetchData = useCallback(async () => {\n    try {\n      // \"user/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\n      const res = await Api.get('user', portfolioOwnerId);\n      setUser(res.data.userInfo);\n      setUserImageUrl(res.data.imagePath);\n    } catch (err) {\n      if (err.response.status === 400) {\n        alert(err.response.data.error);\n      }\n\n      console.log('User 정보 불러오기를 실패하였습니다.', err);\n    }\n  }, [portfolioOwnerId]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData, isEditing]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(UserEditFormPortfolo, {\n      user: user,\n      setIsEditing: setIsEditing,\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(UserCardPortfolio, {\n      user: user,\n      setIsEditing: setIsEditing,\n      isEditable: isEditable,\n      userImageUrl: userImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_s(User, \"lT5M62u3ECL6VO4lkZILBmgDeWQ=\");\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/components/user/User.js"],"names":["React","useState","useEffect","useCallback","UserEditFormPortfolo","UserCardPortfolio","Api","User","portfolioOwnerId","isEditable","isEditing","setIsEditing","user","setUser","userImageUrl","setUserImageUrl","fetchData","res","get","data","userInfo","imagePath","err","response","status","alert","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;;;;AAEA,SAASC,IAAT,OAAgD;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAkC;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CAF4C,CAG5C;;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC,CAJ4C,CAK5C;;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMe,SAAS,GAAGb,WAAW,CAAC,YAAY;AACtC,QAAI;AACA;AACA,YAAMc,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAgBV,gBAAhB,CAAlB;AACAK,MAAAA,OAAO,CAACI,GAAG,CAACE,IAAJ,CAASC,QAAV,CAAP;AACAL,MAAAA,eAAe,CAACE,GAAG,CAACE,IAAJ,CAASE,SAAV,CAAf;AACH,KALD,CAKE,OAAOC,GAAP,EAAY;AACV,UAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;AAC7BC,QAAAA,KAAK,CAACH,GAAG,CAACC,QAAJ,CAAaJ,IAAb,CAAkBO,KAAnB,CAAL;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCN,GAAtC;AACH;AACJ,GAZ4B,EAY1B,CAACd,gBAAD,CAZ0B,CAA7B;AAcAN,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYN,SAAZ,CAFM,CAAT;AAIA,sBACI;AAAA,cACKA,SAAS,gBACN,QAAC,oBAAD;AAAsB,MAAA,IAAI,EAAEE,IAA5B;AAAkC,MAAA,YAAY,EAAED,YAAhD;AAA8D,MAAA,OAAO,EAAEE;AAAvE;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,iBAAD;AAAmB,MAAA,IAAI,EAAED,IAAzB;AAA+B,MAAA,YAAY,EAAED,YAA7C;AAA2D,MAAA,UAAU,EAAEF,UAAvE;AAAmF,MAAA,YAAY,EAAEK;AAAjG;AAAA;AAAA;AAAA;AAAA;AAJR,mBADJ;AASH;;GAnCQP,I;;KAAAA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport UserEditFormPortfolo from './UserEditFormPortfolo';\nimport UserCardPortfolio from './UserCardPortfolio';\nimport * as Api from '../../api';\n\nfunction User({ portfolioOwnerId, isEditable }) {\n    // useState 훅을 통해 isEditing 상태를 생성함.\n    const [isEditing, setIsEditing] = useState(false);\n    // useState 훅을 통해 user 상태를 생성함.\n    const [user, setUser] = useState(null);\n    // useState 훅을 통해 userImageUrl 상태를 생성함.\n    const [userImageUrl, setUserImageUrl] = useState('');\n\n    const fetchData = useCallback(async () => {\n        try {\n            // \"user/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\n            const res = await Api.get('user', portfolioOwnerId);\n            setUser(res.data.userInfo);\n            setUserImageUrl(res.data.imagePath);\n        } catch (err) {\n            if (err.response.status === 400) {\n                alert(err.response.data.error);\n            }\n            console.log('User 정보 불러오기를 실패하였습니다.', err);\n        }\n    }, [portfolioOwnerId]);\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchData, isEditing]);\n\n    return (\n        <>\n            {isEditing ? (\n                <UserEditFormPortfolo user={user} setIsEditing={setIsEditing} setUser={setUser} />\n            ) : (\n                <UserCardPortfolio user={user} setIsEditing={setIsEditing} isEditable={isEditable} userImageUrl={userImageUrl} />\n            )}\n        </>\n    );\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}