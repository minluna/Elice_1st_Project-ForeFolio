{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/components/user/User.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport UserEditForm from './UserEditForm';\nimport UserCard from './UserCard';\nimport * as Api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction User(_ref) {\n  _s();\n\n  let {\n    portfolioOwnerId,\n    isEditable\n  } = _ref;\n  // useState 훅을 통해 isEditing 상태를 생성함.\n  const [isEditing, setIsEditing] = useState(false); // useState 훅을 통해 user 상태를 생성함.\n\n  const [user, setUser] = useState(null); // useState 훅을 통해 userImageUrl 상태를 생성함.\n\n  const [userImageUrl, setUserImageUrl] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // \"user/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\n        const res = await Api.get('user', portfolioOwnerId);\n        setUser(res.data.userInfo);\n        setUserImageUrl(res.data.imagePath);\n      } catch (err) {\n        if (err.response.status === 4000) {\n          alert(err.response.data.error);\n        }\n\n        console.log('User 정보 불러오기를 실패하였습니다.', err);\n      }\n    }\n\n    fetchData();\n  }, [portfolioOwnerId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(UserEditForm, {\n      user: user,\n      setIsEditing: setIsEditing,\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(UserCard, {\n      user: user,\n      setIsEditing: setIsEditing,\n      isEditable: isEditable,\n      userImageUrl: userImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_s(User, \"ngLvhnC/x/JVraHH6I8t0fwVKr0=\");\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/luna/Documents/Elice_1st_Project/portfolio-share-service-racer/front/src/components/user/User.js"],"names":["React","useState","useEffect","UserEditForm","UserCard","Api","User","portfolioOwnerId","isEditable","isEditing","setIsEditing","user","setUser","userImageUrl","setUserImageUrl","fetchData","res","get","data","userInfo","imagePath","err","response","status","alert","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;;;;AAEA,SAASC,IAAT,OAAgD;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAkC;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C,CAF4C,CAG5C;;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC,CAJ4C,CAK5C;;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB,UAAI;AACA;AACA,cAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAgBV,gBAAhB,CAAlB;AACAK,QAAAA,OAAO,CAACI,GAAG,CAACE,IAAJ,CAASC,QAAV,CAAP;AACAL,QAAAA,eAAe,CAACE,GAAG,CAACE,IAAJ,CAASE,SAAV,CAAf;AACH,OALD,CAKE,OAAOC,GAAP,EAAY;AACV,YAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,IAA5B,EAAkC;AAC9BC,UAAAA,KAAK,CAACH,GAAG,CAACC,QAAJ,CAAaJ,IAAb,CAAkBO,KAAnB,CAAL;AACH;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCN,GAAtC;AACH;AACJ;;AACDN,IAAAA,SAAS;AACZ,GAfQ,EAeN,CAACR,gBAAD,CAfM,CAAT;AAiBA,sBACI;AAAA,cACKE,SAAS,gBACN,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEE,IAApB;AAA0B,MAAA,YAAY,EAAED,YAAxC;AAAsD,MAAA,OAAO,EAAEE;AAA/D;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,QAAD;AAAU,MAAA,IAAI,EAAED,IAAhB;AAAsB,MAAA,YAAY,EAAED,YAApC;AAAkD,MAAA,UAAU,EAAEF,UAA9D;AAA0E,MAAA,YAAY,EAAEK;AAAxF;AAAA;AAAA;AAAA;AAAA;AAJR,mBADJ;AASH;;GAlCQP,I;;KAAAA,I;AAoCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport UserEditForm from './UserEditForm';\nimport UserCard from './UserCard';\nimport * as Api from '../../api';\n\nfunction User({ portfolioOwnerId, isEditable }) {\n    // useState 훅을 통해 isEditing 상태를 생성함.\n    const [isEditing, setIsEditing] = useState(false);\n    // useState 훅을 통해 user 상태를 생성함.\n    const [user, setUser] = useState(null);\n    // useState 훅을 통해 userImageUrl 상태를 생성함.\n    const [userImageUrl, setUserImageUrl] = useState('');\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                // \"user/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\n                const res = await Api.get('user', portfolioOwnerId);\n                setUser(res.data.userInfo);\n                setUserImageUrl(res.data.imagePath);\n            } catch (err) {\n                if (err.response.status === 4000) {\n                    alert(err.response.data.error);\n                }\n                console.log('User 정보 불러오기를 실패하였습니다.', err);\n            }\n        }\n        fetchData();\n    }, [portfolioOwnerId]);\n\n    return (\n        <>\n            {isEditing ? (\n                <UserEditForm user={user} setIsEditing={setIsEditing} setUser={setUser} />\n            ) : (\n                <UserCard user={user} setIsEditing={setIsEditing} isEditable={isEditable} userImageUrl={userImageUrl} />\n            )}\n        </>\n    );\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}